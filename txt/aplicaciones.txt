Guía de Aplicaciones de Django
Centro Nacional de Desarrollo e Investigación de Tecnologías Libres (CENDITEL)
CENDITEL, Mérida - Venezuela 
Dirección de Desarrollo 
Autor: Ing. Angelo Osorio 
Fecha de Elaboración: 26-12-2017 (dd,mm,aaaa)

// -------------------------------------- Proyectos [BEGIN] ------------------------------------- //










// -------------------------------------- Proyectos [ENDED] ------------------------------------- //



// --------------------------------------- Modelos [BEGIN] -------------------------------------- //

Crear un modelo:
  Entrar en: nombreapp/models.py

Nota: Los modelos siempre van en singular.

Los id de los modelos son creados automáticamente en caso de no ser declarados

Para crear un modelo se utiliza la sintaxis:

class Nombremodelo(models.Model):
    
    #Atributos del modelo:

    # Campo varchar, Llave primaria, Max lenght (10)
    nombreprimeratributo = models.CharField(max_length=10, primary_key=True)
    
    # Campo varchar largo, Max lenght (50)
    nombresegundoatributo = models.CharField(max_length=50)

    # Campo interger
    nombreterceratributo = models.IntegerField()
    
    # Campo date
    nombrecuartotributo = models.DateField()

    # Llave foránea (uno a muchos): nombre del modelo que importará, puede ser nulo, puede estar
    # vacío, eliminar en cascada.
    llaveforanea = models.ForeignKey('modelo', null=True, blank=True, on_delete=models.CASCADE)

    # Llave foránea (uno a uno): nombre del modelo que importará, puede ser nulo, puede estar vacío,
    # eliminar en cascada.
    llaveunoauno = models.OneToOneField('Persona', null=True, blank=True, on_delete=models.CASCADE)

    # Llave foránea (muchos a muchos): nombre del modelo que importará
    vacuna = models.ManyToManyField('Vacuna')

Para crear una llave foránea se debe importar el modelo

from apps.adopcion.models import Persona



// --------------------------------------- Modelos [ENDED] -------------------------------------- //







// ----------------------------------- Usuarios Django [BEGIN] ---------------------------------- //

Crear usuario administrador:
  $ ./manage.py migrate

Crear usuario administrador:
  $ ./manage.py createsuperuser

Para entrar en el panel administrativo de Django hay que entrar desde el navegador a la dirección:
  localhost:8000/admin

// ----------------------------------- Usuarios Django [ENDED] ---------------------------------- //


// ----------------------------- Objetos con el Shell Django [BEGIN] ---------------------------- //

1. Iniciar el shell interactivo
  $ python manage.py shell

2. Importar los modelos que se van a usar
  >>> from apps.mascota.models import Vacuna, Mascota
  >>> from apps.adopcion.models import Persona

3. Crear el objeto:
  3.1. Forma 1:
    >>> Persona.objects.create(
    nombre = "Ezio",
    apellidos = "Auditore",
    edad = 18,
    telefono = "123456789012",
    email = "same@same.com",
    domicilio = "casa")
  3.2. Forma 2:
    >>> variable = Persona(
    ... nombre = "Altair",
    ... apellidos = "Ibn La ahad",
    ... edad = 18,
    ... telefono = "123456789012",
    ... email = "same@same.com",
    ... domicilio = "casa")
    >>> variable.save()

  Nota: Con esta forma se pueden importar claves foráneras de manera rápida:
    >>> mascota1 = Mascota(
    ... nombre = "Kakashi",
    ... sexo = "macho",
    ... edad_aproximada = 2,
    ... fecha_rescate = "2018-01-11",
    ... persona = variable)

    >>> mascota1 = Mascota(
    ... nombre = "Kakashi",
    ... sexo = "macho",
    ... edad_aproximada = 2,
    ... fecha_rescate = "2018-01-11",
    ... persona = variable)

    >>> v1 = Vacuna(nombre="Vacuna 1")
    >>> v1.save()
    >>> v2 = Vacuna(nombre="Vacuna 2")
    >>> v2.save()

  3.3. Añadir una llave foránea:
    >>> mascota1.vacuna.add(v1, v2)

4. Hacer un query de los objetos creados:
  4.1. Ver todos los objetos
  >>> Persona.objects.all()

  4.1. Filtrar el query por id
  >>> Persona.objects.filter(id=2)

// ----------------------------- Objetos con el Shell Django [ENDED] ---------------------------- //



Métodos de Django

Guardar un objeto
p.save()

Para mostrar todos los objetos
Question.objects.all()

Filtros
Question.objects.filter(atributo=valor)

Filtros: Objetos que contengan "valor" en el atributo
Question.objects.filter(atributo__contains=valor)
